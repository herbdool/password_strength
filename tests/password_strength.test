<?php

/**
 * @file
 * Tests for password strength module.
 */

class PasswordStrengthTestCase extends BackdropWebTestCase {
  /**
   * A user able to change her password.
   *
   * @var object
   */
  protected $web_user;

  /**
   * A user with permission to set the minimum password strength required level.
   *
   * @var object
   */
  protected $admin_user;

  function setUp() {
    parent::setUp('password_strength');
    $this->web_user = $this->backdropCreateUser();
    $this->admin_user = $this->backdropCreateUser(array('administer site configuration'));
  }

  /**
   * Tests various levels of minimum scores when changing a user account password.
   */
  function testChangePassword() {
    // Set required score to very weak and test that any password works.
    $this->setRequiredScore('0');
    $this->changePassword($this->web_user, 'Password1');
    $this->changePassword($this->web_user, '35qzYI^HUbAZ');

    // Set required score to very strong and test that a weak password fails and
    // that a strong password works.
    $this->setRequiredScore('4');
    $this->changePassword($this->web_user, 'Password1', TRUE);
    $this->changePassword($this->web_user, '35qzYI^HUbAZ');
  }

  /**
   * Tests a user account password change.
   *
   * @param stdClass $account
   *   Backdrop user account for additional contexts.
   *
   * @param string $new_pass
   *   Plain-text password to be used as new password.
   *
   * @param boolean $too_weak
   *   Optional Whether the password is too weak and the change should fail.
   */
  function changePassword($account, $new_pass, $too_weak = FALSE) {
    $this->backdropLogin($account);

    // Test that the error message appears when attempting to change the mail or
    // pass without the current password.
    $edit = array();
    $edit['mail'] = $this->randomName() . '@new.example.com';
    $this->backdropPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('E-mail address'))));

    $edit['current_pass'] = $account->pass_raw;
    $this->backdropPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertRaw(t("The changes have been saved."));

    // Test that the user must enter current password before changing passwords.
    $edit = array();
    $edit['pass'] = $new_pass;
    $this->backdropPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('Password'))));

    // Try again with the current password.
    $edit['current_pass'] = $account->pass_raw;
    $this->backdropPost("user/$account->uid/edit", $edit, t('Save'));

    if ($too_weak) {
      $this->assertRaw(t("Password does not meet required strength."));
    }
    else {
      $this->assertRaw(t("The changes have been saved."));

      // Make sure the user can log in with their new password.
      $this->backdropLogout();
      $account->pass_raw = $new_pass;
      $this->backdropLogin($account);
      $this->backdropLogout();
    }
  }

  /**
   * Sets a required score through the admin UI.
   *
   * @param int $score
   *   An integer corresponding to a password strength.
   */
  function setRequiredScore($score) {
    $this->backdropLogin($this->admin_user);
    $edit = array();
    $edit['default_required_score'] = $score;
    $this->backdropPost('admin/config/people/password-strength', $edit, t('Save configuration'));

    // Ensure the value was saved.
    $this->assertIdentical(config_get('password_strength.settings', 'default_required_score'), $score, 'Password strength was saved properly.');
  }
}
